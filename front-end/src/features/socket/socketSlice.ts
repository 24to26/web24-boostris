import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';

type loadingState = 'idle' | 'loading' | 'failed';
export type roomInfo = {
  id: string;
  owner: string;
  name: string;
  limit: number;
  isSecret: boolean;
  current: number;
};
export type userInfo = { nickname: string; id: string };

export interface SocketState {
  rooms: roomInfo[];
  users: userInfo[];
  roomID: string | null;
}

const initialState: SocketState = {
  rooms: [],
  users: [],
  roomID: null,
};

export const socketSlice = createSlice({
  name: 'socket',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateUsers: (state, action) => {
      state.users = action.payload;
    },
    updateRooms: (state, action) => {
      state.rooms = action.payload;
    },
    updateRoomID: (state, action) => {
      state.roomID = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const { updateUsers, updateRooms, updateRoomID } = socketSlice.actions;

export const selectSocket = (state: RootState) => state.socket;

export default socketSlice.reducer;
