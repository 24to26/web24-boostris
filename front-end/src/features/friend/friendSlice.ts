import {
  makeFriendRequest,
  updateFriendRequest,
  requestList,
  friendList,
  requestApiBody,
  requestUpdateApiBody,
  requestListApiBody,
  listApiBody,
} from './friendAPI';
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';

// type loadingState = 'idle' | 'loading' | 'failed';

export interface FriendState {
  friendList: any[];
  friendRequestList: any[];
}

const initialState: FriendState = {
  friendList: [],
  friendRequestList: [],
};

export const makeRequest = createAsyncThunk(
  'friend/makeRequest',
  async (requestBody: requestApiBody) => {
    const response = await makeFriendRequest(requestBody);
    return response;
  }
);
export const updateRequest = createAsyncThunk(
  'friend/updateRequest',
  async (requestBody: requestUpdateApiBody) => {
    const response = await updateFriendRequest(requestBody);
    requestBody.cb();
    return response;
  }
);
export const getRequestList = createAsyncThunk(
  'friend/getRequestList',
  async (requestBody: requestListApiBody) => {
    const response = await requestList(requestBody);
    return response;
  }
);
export const getFriendList = createAsyncThunk(
  'friend/getFriendList',
  async (requestBody: listApiBody) => {
    const response = await friendList(requestBody);
    return response;
  }
);

export const friendSlice = createSlice({
  name: 'friend',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getFriendList.fulfilled, (state, action) => {
      state.friendList = action.payload.data;
    });
    builder.addCase(getRequestList.fulfilled, (state, action) => {
      state.friendRequestList = action.payload.data;
    });
    builder.addCase(makeRequest.fulfilled, (state, action) => {});
    builder.addCase(updateRequest.fulfilled, (state, action) => {});
  },
});

export const {} = friendSlice.actions;

export const selectFriend = (state: RootState) => state.friend;

export default friendSlice.reducer;
