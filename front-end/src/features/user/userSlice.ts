import {
  fetchGithubUserData,
  fetchGoogleUserData,
  fetchNaverUserData,
  googleUserInfoProps,
  postNewUser,
  registerDataContent,
} from './userAPI';
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';

export interface UserState {
  profile: { id: string | number | null; isOurUser: boolean };
  status: 'idle' | 'loading' | 'failed';
  register: { status: 'idle' | 'loading' | 'failed'; dupCheck: boolean | null };
}

const initialState: UserState = {
  profile: { id: null, isOurUser: false },
  status: 'idle',
  register: { status: 'idle', dupCheck: null },
};

export const fetchGithubUser = createAsyncThunk(
  'user/fetchGithubUser',
  async (code: string) => {
    const response = await fetchGithubUserData(code);
    return response;
  }
);

export const fetchNaverUser = createAsyncThunk(
  'user/fetchNaverUser',
  async (accessToken: string) => {
    const response = await fetchNaverUserData(accessToken);
    return response;
  }
);

export const fetchGoogleUser = createAsyncThunk(
  'user/fetchGoogleUser',
  async (user: googleUserInfoProps) => {
    const response = await fetchGoogleUserData(user);
    return response;
  }
);

export const registerNewUser = createAsyncThunk(
  'user/registerNewUser',
  async (data: registerDataContent) => {
    const response = await postNewUser(data);
    return response;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearRegister: (state) => {
      state.register = {
        dupCheck: null,
        status: 'idle',
      };
      state.profile = {
        id: null,
        isOurUser: false,
      };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchGithubUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchGithubUser.fulfilled, (state, action) => {
        state.status = 'idle';
        state.profile = action.payload;
      })
      .addCase(fetchNaverUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchNaverUser.fulfilled, (state, action) => {
        state.status = 'idle';
        state.profile = action.payload;
      })
      .addCase(fetchGoogleUser.pending, (state) => {
        state.status = 'loading';
        state.profile = { id: null, isOurUser: false };
      })
      .addCase(fetchGoogleUser.fulfilled, (state, action) => {
        state.status = 'idle';
        state.profile = action.payload;
      })
      .addCase(registerNewUser.pending, (state) => {
        state.register.status = 'loading';
      })
      .addCase(registerNewUser.fulfilled, (state, action) => {
        state.register = action.payload;
        state.register.status = 'idle';
      });
  },
});

export const { clearRegister } = userSlice.actions;

export const selectUser = (state: RootState) => state.user;

export default userSlice.reducer;
