import {
  clearCookie,
  fetchAuthData,
  fetchGithubUserData,
  fetchGoogleUserData,
  fetchNaverUserData,
  googleUserInfoProps,
  postNewUser,
  registerDataContent,
} from './userAPI';
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';

type loadingState = 'idle' | 'loading' | 'failed';

export interface UserState {
  profile: Profile;
  register: { status: loadingState; dupCheck: boolean | null };
  auth: {
    status: loadingState;
    authenticated: boolean;
  };
}

export interface Profile {
  id: string | number | null;
  isOurUser: boolean;
  status: loadingState;
  nickname: null | string;
}

const initialState: UserState = {
  profile: { id: null, isOurUser: false, status: 'idle', nickname: null },
  register: { status: 'idle', dupCheck: null },
  auth: {
    status: 'loading',
    authenticated: false,
  },
};

export const checkAuth = createAsyncThunk('user/checkAuth', async () => {
  const response = await fetchAuthData();
  return response;
});

export const logOut = createAsyncThunk('user/logOut', async () => {
  const response = await clearCookie();
  return response;
});

export const fetchGithubUser = createAsyncThunk('user/fetchGithubUser', async (code: string) => {
  const response = await fetchGithubUserData(code);
  return response;
});

export const fetchNaverUser = createAsyncThunk(
  'user/fetchNaverUser',
  async (accessToken: string) => {
    const response = await fetchNaverUserData(accessToken);
    return response;
  }
);

export const fetchGoogleUser = createAsyncThunk(
  'user/fetchGoogleUser',
  async (user: googleUserInfoProps) => {
    const response = await fetchGoogleUserData(user);
    return response;
  }
);

export const registerNewUser = createAsyncThunk(
  'user/registerNewUser',
  async (data: registerDataContent) => {
    const response = await postNewUser(data);
    return response;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearRegister: (state) => {
      state.register = {
        dupCheck: null,
        status: 'idle',
      };
      state.profile = {
        id: null,
        isOurUser: false,
        status: 'idle',
        nickname: null,
      };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(checkAuth.pending, (state) => {
        state.auth.status = 'loading';
      })
      .addCase(checkAuth.fulfilled, (state, action) => {
        state.auth.status = 'idle';
        state.auth.authenticated = action.payload.authenticated;

        state.profile.id = action.payload.oauth_id;
        state.profile.nickname = action.payload.nickname;
        state.profile.isOurUser = true;
      })
      .addCase(logOut.fulfilled, (state, action) => {
        state.auth.status = 'idle';
        state.auth.authenticated = action.payload.authenticated;
      })
      .addCase(fetchGithubUser.pending, (state) => {
        state.profile = { id: null, isOurUser: false, status: 'loading', nickname: null };
      })
      .addCase(fetchGithubUser.fulfilled, (state, action) => {
        state.profile = { ...action.payload, status: 'idle' };
        state.auth.authenticated = true;
      })
      .addCase(fetchNaverUser.pending, (state) => {
        state.profile = { id: null, isOurUser: false, status: 'loading', nickname: null };
      })
      .addCase(fetchNaverUser.fulfilled, (state, action) => {
        state.profile = { ...action.payload, status: 'idle' };
        state.auth.authenticated = true;
      })
      .addCase(fetchGoogleUser.pending, (state) => {
        state.profile = { id: null, isOurUser: false, status: 'loading', nickname: null };
      })
      .addCase(fetchGoogleUser.fulfilled, (state, action) => {
        state.profile = { ...action.payload, status: 'idle' };
        state.auth.authenticated = true;
      })
      .addCase(registerNewUser.pending, (state) => {
        state.register.status = 'loading';
      })
      .addCase(registerNewUser.fulfilled, (state, action) => {
        state.register = action.payload;
        state.register.status = 'idle';
      });
  },
});

export const { clearRegister } = userSlice.actions;

export const selectUser = (state: RootState) => state.user;

export default userSlice.reducer;
